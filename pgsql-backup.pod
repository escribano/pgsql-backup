=head1 NAME

pgsql-backup - basic automated backup script for PostgreSQL

=head1 SYNOPSIS

pgsql-backup [/path/to/pgsql-backup.conf]

Without options, the script will attempt to locate a configuration file in
several locations:

=over 4

=item C<~/.pgsql-backup> (user-specific)

=item C</etc/pgsql-backup.conf> (system-wide config)

=item C</etc/pgsql-backup/options.conf> (legacy)

=back

The last location above is a legacy location and should not be used. Existing
users should relocate /etc/pgsql-backup/options.conf to /etc/pgsql-backup.conf

=head1 DESCRIPTION

This script is designed to be ran daily, but can be run more often. Rolling
daily, weekly and monthly backups are created in the specified location for
each database requested to be backed up. Backups can be optionally compressed
to save diskspace. Backups can also be optionally emailed as attachments.

=head1 OPTIONS

Only a single argument is accepted on the command line: a specific path to a
configuration file. Example:

  pgsql-backup /var/lib/pgsql/pgsql-backup.conf

=head1 CONFIGURATION

The following configuration options exist in C<pgsql-backup.conf>.

=head2 PGUSER

The username to connect to the PostgreSQL daemon as. This is the PostgreSQL
username, not the system username.

Type:     String

Default:  postgres

=head2 PGPASSWORD

The password required for the username specified above.

Type:     String

Default:  

=head2 PPGHOST

The hostname or IP Address of the machine running the PostgreSQL daemon you
wish to backup. If the script is running on the same machine as the daemon,
use C<localhost>

Type:     String

Default:  localhost

=head2 PGDATABASE

The dump process needs an initial database to connect to when dumping. You can
generally leave this as C<postgres>, C<template1> or C<template0> unless you
have deleted those databases. Any database that exists and the user specified
in PGUSER can connect to is OK. No changes will be made to the database you use

Type:     String

Default:  postgres

=head2 DBNAMES

Space-separated list of databases to include in the backup. Special keyword
C<all> selects all databases the exist at run time. Each database will be
backed up to it's own file.

Type:     String

Default:  all

=head2 BACKUPDIR

The destination for your backup (ie, where to store your backups). Use an
absolute path to avoid issues with environment changes, especially when using
cron to automate your backups. The path specified here must exist before the
first backup is run. Any missing subdirectories will be created as required.

Type:     String

Default:  None

=head2 MAILCONTENT 

How to handle the output of the script:

=over 4

=item C<log> = always email the log file to the address in MAILADDR

=item C<stdout> = print the log to stdout. This may still get emailed to you
if you are running the script from cron.

=item C<quiet> = only email if there is a problem.

=back

Type:     C<log> or C<stdout> or C<quiet>

Default:  stdout

=head2 MAXATTSIZE

Maximum size of log files to attach to e-mail in bytes. Don't forget the
account for the overhead of the rest of the e-mail if you have maximum limits
on e-mail sizes. This is only the attachment limit.

Type:     String

Default:  4000

=head2 MAILADDR

Email address to send reports to according to MAILCONTENT

Type:     String

Default:  root@localhost

=head2 DBEXCLUDE

Space-separated list of databases to always exclude from the backup. Useful if
you are using the C<all> setting for DBNAMES but want to exclude some specific
databases.

Type:     String

Default:  

=head2 CREATE_DATABASE

Include a CREATE DATABASE statement in the dumped output. If set to C<yes> then
pg_dump is called with with C<--create> flag.

Type:     C<yes> or C<no>

Default:  yes

=head2 DOWEEKLY

Which day to create a weekly archive of the dumps. Use '0' to not do weekly
archives. Valid values are 1 to 7 to indicate which day to create the weekly
archive on, with 1 being Monday.

Type:     0 to 7

Default:  1

=head2 COMP

Compression type to use for the backup. Database dumps can take a lot of room,
but usually tend to compress very well.

Type:     C<gzip> or C<bzip2> or C<xz> or C<none>

Default:  bzip2

=head2 LATEST

If set to '1' the script will create a directory in BACKUPDIR called C<latest>
and hard-link to the latest dump of each database. This provides a static path
to the latest backup for scripting restores, copies, Nagios file check etc.
Note that not all filesystems support hard-links, so if you are using a
filesystem that doesn't such as NTFS or FAT then you will need to disable this
option.

Type:     C<1> or C<0>

Default:  1

=head2 SOCKET

If you need to connect to the database via a Unix socket, specify it here. If
this option is set non-empty, it will override the DBHOST setting.

Type:     String

Default:  

=head2 DUMPFORMAT

Format of the database dump to pass to the 'pg_dump' utility. Using C<custom>
is the most flexible format according to PostgreSQL developers.

B<NOTE:> using the C<tar> format requires sufficient temporary disk space
(usually in /tmp) to dump an intermediatary copy of each database as part of
the conversion to tar.

Refer to L<pg_dump(1)> for more information on the 3 options.

Type:     C<custom> or C<tar> or C<plain>

Default:  custom

=head2 CONFIG_UMASK

umask controls the permissions of created directories and files. The default
is fairly restrictive (700 for directories, 600 for files). You may like/need
to relax for your environment. Refer to L<umask(1)> for further information.

Type:     Octal

Default:  0077

=head2 PREBACKUP

Optional. A command to execute before the backup starts. eg, a database
cleanup script. See L</HOOKS> below.

Type:     String

Default:

=head2 POSTBACKUP

Optional. A command to execute after the backup is complete. eg, a scipt to
copy the output files to another server. See L</HOOKS> below.

Type:     String

Default:

=head1 SERVER PERMISSIONS

The PostgreSQL user that is doing the backup (not the system user) should
ideally be a dedicated user:

In a shell:
  $ createuser -D -i -l -P -R -s dumper

SQL Commands:
  CREATE ROLE dumper LOGIN SUPERUSER INHERIT;
  ALTER ROLE dumper WITH PASSWORD SuperSecretPassword;

Creating a dedicated backup user is beneficial for a couple of reasons:

=over 4

=item 1. Distribution of the credentials is limited to the location(s) that
need to handle backups.

=item 2. If the credentials are compromised, they can be revoked without
affecting things other than backups.

=back

=head1 HOOKS

The script has 2 hooks available for you to incorporate custom actions: 
C<PREBACKUP> and C<POSTBACKUP>

The command specified in POSTBACKUP will be executed after the dumps are
complete, with the names of the dumps as arguments.

Your POSTBACKUP script should print the new names of altered files on stdout
if it alters the names.

A sample hook is included: F<hook-postbackup.sh>

=head1 SECURITY

Database dumps created by this script are unencrypted; you should take into
consideration the following (incomplete list) of implications, especially if
your database(s) store sensitive information such as usernames, passwords,
credit card details or other personal information (espeically those of your
customers).

=over 4

=item * When writing to disk, ensure the backup directory has restictive
permissions to prevent unauthorized users gaining access to the backups.

=item * Use the L</POSTBACKUP> hook to encrypt your backups.

=item * When emailing backup dumps, avoid the emails being trasmitted over
untrusted networks (ie, the internet). Internal mail systems only. Be aware
of mail systems that archive emails may retain copies of your backups.

=item * If you don't administer the email server, please respect your email
admin and don't email 2gb database backups to yourself each night ;)

=back

=head1 BUGS

=head2 Reporting Bugs

Email bug reports to L<fukawi2@gmail.com|mailto://fukawi2@gmail.com>

=head2 Known Bugs

=over 4

=item * Technically not a bug, but PostgreSQL configuration files (eg,
postgres.conf and pg_hba.conf) are NOT backed up by this utility. These files
should be backup up separately. They are not handled by this script because
the script is designed to be able to backup a remote server by connecting
directly to the PostgreSQL server as a client. When connected in this manner,
it is impossible to ask the server to send it's configuration files.

=back

=head1 ACKNOWLEDGEMENTS

This script is a fork of "MySQL Backup Script" version 2.5 Copyright (c)
2002-2003 wipe_out@lycos.co.u kavailable from:
L<http://sourceforge.net/projects/automysqlbackup/>

=head1 LICENSE

Copyright 2010-2013 Phillip Smith

Made available under the conditions of the GPLv2. This is free software; refer
to the F<LICENSE> file for details.

=head1 AVAILABILITY

L<https://github.com/fukawi2/pgsql-backup>

=head1 AUTHOR

Phillip Smith aka fukawi2

=cut
